// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_security/ccv/parent/v1/parent.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/ibc-go/v3/modules/core/02-client/types"
	types1 "github.com/cosmos/ibc-go/v3/modules/light-clients/07-tendermint/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CreateChildChainProposal is a governance proposal on the parent chain to spawn a new child chain.
// If it passes, then all validators on the parent chain are expected to validate the child chain at spawn time
// or get slashed. It is recommended that spawn time occurs after the proposal end time.
type CreateChildChainProposal struct {
	// the title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the proposed chain-id of the new child chain, must be different from all other child chain ids of the executing
	// parent chain.
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	// the proposed initial height of new child chain.
	// For a completely new chain, this will be {0,1}. However, it may be different if this is a chain that is converting to a child chain.
	InitialHeight types.Height `protobuf:"bytes,4,opt,name=initial_height,json=initialHeight,proto3" json:"initial_height" yaml:"initial_height"`
	// genesis hash with no staking information included.
	GenesisHash []byte `protobuf:"bytes,5,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty" yaml:"genesis_hash"`
	// binary hash is the hash of the binary that should be used by validators on chain initialization.
	BinaryHash []byte `protobuf:"bytes,6,opt,name=binary_hash,json=binaryHash,proto3" json:"binary_hash,omitempty" yaml:"binary_hash"`
	// spawn time is the time on the parent chain at which the child chain genesis is finalized and all validators
	// will be responsible for starting their child chain validator node.
	SpawnTime time.Time `protobuf:"bytes,7,opt,name=spawn_time,json=spawnTime,proto3,stdtime" json:"spawn_time" yaml:"spawn_time"`
}

func (m *CreateChildChainProposal) Reset()      { *m = CreateChildChainProposal{} }
func (*CreateChildChainProposal) ProtoMessage() {}
func (*CreateChildChainProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0837481cd1f9c3e, []int{0}
}
func (m *CreateChildChainProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateChildChainProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateChildChainProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateChildChainProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChildChainProposal.Merge(m, src)
}
func (m *CreateChildChainProposal) XXX_Size() int {
	return m.Size()
}
func (m *CreateChildChainProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChildChainProposal.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChildChainProposal proto.InternalMessageInfo

// Params defines the parameters for CCV Parent module
type Params struct {
	TemplateClient *types1.ClientState `protobuf:"bytes,1,opt,name=template_client,json=templateClient,proto3" json:"template_client,omitempty" yaml:"template_client"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0837481cd1f9c3e, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetTemplateClient() *types1.ClientState {
	if m != nil {
		return m.TemplateClient
	}
	return nil
}

type HandshakeMetadata struct {
	ProviderFeePoolAddr string `protobuf:"bytes,1,opt,name=provider_fee_pool_addr,json=providerFeePoolAddr,proto3" json:"provider_fee_pool_addr,omitempty"`
	Version             string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *HandshakeMetadata) Reset()         { *m = HandshakeMetadata{} }
func (m *HandshakeMetadata) String() string { return proto.CompactTextString(m) }
func (*HandshakeMetadata) ProtoMessage()    {}
func (*HandshakeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0837481cd1f9c3e, []int{2}
}
func (m *HandshakeMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HandshakeMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HandshakeMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HandshakeMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandshakeMetadata.Merge(m, src)
}
func (m *HandshakeMetadata) XXX_Size() int {
	return m.Size()
}
func (m *HandshakeMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_HandshakeMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_HandshakeMetadata proto.InternalMessageInfo

func (m *HandshakeMetadata) GetProviderFeePoolAddr() string {
	if m != nil {
		return m.ProviderFeePoolAddr
	}
	return ""
}

func (m *HandshakeMetadata) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateChildChainProposal)(nil), "interchain_security.ccv.parent.v1.CreateChildChainProposal")
	proto.RegisterType((*Params)(nil), "interchain_security.ccv.parent.v1.Params")
	proto.RegisterType((*HandshakeMetadata)(nil), "interchain_security.ccv.parent.v1.HandshakeMetadata")
}

func init() {
	proto.RegisterFile("interchain_security/ccv/parent/v1/parent.proto", fileDescriptor_c0837481cd1f9c3e)
}

var fileDescriptor_c0837481cd1f9c3e = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x3f, 0x6f, 0xd4, 0x30,
	0x14, 0xbf, 0x50, 0xfa, 0xcf, 0x57, 0x5a, 0x35, 0x2d, 0x25, 0x3a, 0x89, 0xcb, 0x91, 0xa9, 0x12,
	0xc2, 0xd1, 0xb5, 0x03, 0xa8, 0x1b, 0x77, 0x12, 0x2a, 0x03, 0x52, 0x15, 0x18, 0x10, 0x4b, 0x70,
	0x9c, 0xd7, 0xc4, 0x22, 0x89, 0x23, 0xdb, 0x0d, 0x1c, 0x9f, 0x80, 0xb1, 0x23, 0x63, 0xbf, 0x08,
	0x7b, 0xc7, 0x8e, 0x4c, 0x07, 0xea, 0x7d, 0x83, 0xfb, 0x04, 0x28, 0x76, 0xd2, 0x3b, 0x10, 0xdb,
	0x7b, 0xbf, 0x3f, 0xb6, 0x9f, 0xdf, 0x7b, 0x08, 0xb3, 0x42, 0x81, 0xa0, 0x29, 0x61, 0x45, 0x28,
	0x81, 0x5e, 0x08, 0xa6, 0x26, 0x3e, 0xa5, 0x95, 0x5f, 0x12, 0x01, 0x85, 0xf2, 0xab, 0x61, 0x13,
	0xe1, 0x52, 0x70, 0xc5, 0xed, 0x27, 0xff, 0xd1, 0x63, 0x4a, 0x2b, 0xdc, 0xa8, 0xaa, 0x61, 0x6f,
	0x3f, 0xe1, 0x09, 0xd7, 0x6a, 0xbf, 0x8e, 0x8c, 0xb1, 0xe7, 0x26, 0x9c, 0x27, 0x19, 0xf8, 0x3a,
	0x8b, 0x2e, 0xce, 0x7d, 0xc5, 0x72, 0x90, 0x8a, 0xe4, 0x65, 0x2b, 0x60, 0x11, 0xf5, 0x29, 0x17,
	0xe0, 0xd3, 0x8c, 0x35, 0x57, 0x9b, 0xa8, 0x11, 0xf8, 0xb5, 0x20, 0x63, 0x49, 0xaa, 0x0c, 0x2c,
	0x7d, 0x05, 0x45, 0x0c, 0x22, 0x67, 0x46, 0xbc, 0xc8, 0x8c, 0xc1, 0xfb, 0xb1, 0x82, 0x9c, 0xb1,
	0x00, 0xa2, 0x60, 0x9c, 0xb2, 0x2c, 0x1e, 0xd7, 0x8f, 0x3e, 0x13, 0xbc, 0xe4, 0x92, 0x64, 0xf6,
	0x3e, 0x5a, 0x55, 0x4c, 0x65, 0xe0, 0x58, 0x03, 0xeb, 0x70, 0x33, 0x30, 0x89, 0x3d, 0x40, 0xdd,
	0x18, 0x24, 0x15, 0xac, 0x54, 0x8c, 0x17, 0xce, 0x3d, 0xcd, 0x2d, 0x43, 0x36, 0x46, 0x1b, 0xa6,
	0x7a, 0x16, 0x3b, 0x2b, 0x35, 0x3d, 0xda, 0x9b, 0x4f, 0xdd, 0x9d, 0x09, 0xc9, 0xb3, 0x13, 0xaf,
	0x65, 0xbc, 0x60, 0x5d, 0x87, 0xaf, 0x63, 0xfb, 0x23, 0xda, 0x66, 0x05, 0x53, 0x8c, 0x64, 0x61,
	0x0a, 0xf5, 0xe3, 0x9d, 0xfb, 0x03, 0xeb, 0xb0, 0x7b, 0xd4, 0xc3, 0x2c, 0xa2, 0xb8, 0xae, 0x17,
	0x37, 0x55, 0x56, 0x43, 0x7c, 0xaa, 0x15, 0xa3, 0xc7, 0xd7, 0x53, 0xb7, 0x33, 0x9f, 0xba, 0x0f,
	0xcd, 0xa9, 0x7f, 0xfb, 0xbd, 0xe0, 0x41, 0x03, 0x18, 0xb5, 0x7d, 0x82, 0xb6, 0x12, 0x28, 0x40,
	0x32, 0x19, 0xa6, 0x44, 0xa6, 0xce, 0xea, 0xc0, 0x3a, 0xdc, 0x1a, 0x3d, 0x9a, 0x4f, 0xdd, 0x3d,
	0xe3, 0x5f, 0x66, 0xbd, 0xa0, 0xdb, 0xa4, 0xa7, 0x44, 0xa6, 0xf6, 0x73, 0xd4, 0x8d, 0x58, 0x41,
	0xc4, 0xc4, 0x58, 0xd7, 0xb4, 0xf5, 0x60, 0x3e, 0x75, 0x6d, 0x63, 0x5d, 0x22, 0xbd, 0x00, 0x99,
	0x4c, 0x1b, 0xdf, 0x23, 0x24, 0x4b, 0xf2, 0xb9, 0x08, 0xeb, 0x36, 0x3a, 0xeb, 0x4d, 0x49, 0xa6,
	0xc7, 0xb8, 0xed, 0x31, 0x7e, 0xd7, 0xf6, 0xf8, 0xae, 0xa4, 0x5d, 0x73, 0xee, 0xc2, 0xeb, 0x5d,
	0xfe, 0x72, 0xad, 0x60, 0x53, 0x03, 0xb5, 0xfc, 0x64, 0xe3, 0xdb, 0x95, 0xdb, 0xf9, 0x7e, 0xe5,
	0x76, 0xbc, 0xaf, 0x68, 0xed, 0x8c, 0x08, 0x92, 0x4b, 0xbb, 0x44, 0x3b, 0x0a, 0xf2, 0x32, 0x23,
	0x0a, 0x42, 0xf3, 0x5b, 0xba, 0x6d, 0xdd, 0xa3, 0xa7, 0xfa, 0x17, 0x97, 0x87, 0x02, 0x2f, 0x8d,
	0x41, 0x35, 0xc4, 0x63, 0x8d, 0xbe, 0x55, 0x44, 0xc1, 0xa8, 0x37, 0x9f, 0xba, 0x07, 0xe6, 0xfe,
	0x7f, 0x4e, 0xf3, 0x82, 0xed, 0x16, 0x31, 0x06, 0x2f, 0x42, 0xbb, 0xa7, 0xa4, 0x88, 0x65, 0x4a,
	0x3e, 0xc1, 0x1b, 0x50, 0x24, 0x26, 0x8a, 0xd8, 0xc7, 0xe8, 0xa0, 0x14, 0xbc, 0x62, 0x31, 0x88,
	0xf0, 0x1c, 0x20, 0x2c, 0x39, 0xcf, 0x42, 0x12, 0xc7, 0xa2, 0x19, 0xa2, 0xbd, 0x96, 0x7d, 0x05,
	0x70, 0xc6, 0x79, 0xf6, 0x32, 0x8e, 0x85, 0xed, 0xa0, 0xf5, 0x0a, 0x84, 0x5c, 0x8c, 0x53, 0x9b,
	0x8e, 0x82, 0xeb, 0xdb, 0xbe, 0x75, 0x73, 0xdb, 0xb7, 0x7e, 0xdf, 0xf6, 0xad, 0xcb, 0x59, 0xbf,
	0x73, 0x33, 0xeb, 0x77, 0x7e, 0xce, 0xfa, 0x9d, 0x0f, 0x2f, 0x12, 0xa6, 0xd2, 0x8b, 0x08, 0x53,
	0x9e, 0xfb, 0x94, 0xcb, 0x9c, 0x4b, 0x7f, 0xb1, 0x77, 0xcf, 0xee, 0xf6, 0xf4, 0xcb, 0xf2, 0xa6,
	0xaa, 0x49, 0x09, 0x32, 0x5a, 0xd3, 0x7f, 0x7f, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x80,
	0x26, 0x14, 0xd8, 0x03, 0x00, 0x00,
}

func (m *CreateChildChainProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChildChainProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateChildChainProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.SpawnTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.SpawnTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintParent(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	if len(m.BinaryHash) > 0 {
		i -= len(m.BinaryHash)
		copy(dAtA[i:], m.BinaryHash)
		i = encodeVarintParent(dAtA, i, uint64(len(m.BinaryHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GenesisHash) > 0 {
		i -= len(m.GenesisHash)
		copy(dAtA[i:], m.GenesisHash)
		i = encodeVarintParent(dAtA, i, uint64(len(m.GenesisHash)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.InitialHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintParent(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintParent(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintParent(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TemplateClient != nil {
		{
			size, err := m.TemplateClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HandshakeMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandshakeMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HandshakeMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintParent(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderFeePoolAddr) > 0 {
		i -= len(m.ProviderFeePoolAddr)
		copy(dAtA[i:], m.ProviderFeePoolAddr)
		i = encodeVarintParent(dAtA, i, uint64(len(m.ProviderFeePoolAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParent(dAtA []byte, offset int, v uint64) int {
	offset -= sovParent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateChildChainProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovParent(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovParent(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovParent(uint64(l))
	}
	l = m.InitialHeight.Size()
	n += 1 + l + sovParent(uint64(l))
	l = len(m.GenesisHash)
	if l > 0 {
		n += 1 + l + sovParent(uint64(l))
	}
	l = len(m.BinaryHash)
	if l > 0 {
		n += 1 + l + sovParent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.SpawnTime)
	n += 1 + l + sovParent(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TemplateClient != nil {
		l = m.TemplateClient.Size()
		n += 1 + l + sovParent(uint64(l))
	}
	return n
}

func (m *HandshakeMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderFeePoolAddr)
	if l > 0 {
		n += 1 + l + sovParent(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovParent(uint64(l))
	}
	return n
}

func sovParent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParent(x uint64) (n int) {
	return sovParent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateChildChainProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChildChainProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChildChainProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisHash = append(m.GenesisHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisHash == nil {
				m.GenesisHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryHash = append(m.BinaryHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BinaryHash == nil {
				m.BinaryHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpawnTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.SpawnTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemplateClient == nil {
				m.TemplateClient = &types1.ClientState{}
			}
			if err := m.TemplateClient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandshakeMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandshakeMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandshakeMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderFeePoolAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderFeePoolAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParent = fmt.Errorf("proto: unexpected end of group")
)
